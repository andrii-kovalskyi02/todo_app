{"version":3,"sources":["types/TodoStatus.ts","components/TodoHeader/TodoHeader.tsx","context/TodoListContext.tsx","components/TodoItem/TodoEditForm/TodoEditForm.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFooter/TodoFooter.tsx","components/TodoNotification/TodoNotification.tsx","utils/fetchClient.ts","api/todos.ts","App.tsx","index.tsx"],"names":["TodoStatus","TodoHeader","React","memo","isTempTodoTrue","areAllTodosCompleted","isToggleAllButtonVisible","showErrorMessage","onEnterKeyPress","onToggleAllButtonClick","useState","title","setTitle","inputRef","useRef","useEffect","current","focus","className","type","classNames","active","onClick","aria-label","onSubmit","event","preventDefault","normalizedTitle","trim","value","ref","placeholder","disabled","onChange","inputElement","target","TodoListContext","createContext","visibleTodos","tempTodo","completedTodoIdList","handleTodoRename","handleToggleButtonClick","handleRemoveButtonClick","TodoEditForm","todoId","todoTitle","exitEditionMode","useContext","handleInputChange","useCallback","inputValue","sumbitEdition","handleSubmit","handleKeyUp","key","onKeyUp","onBlur","TodoItem","todo","isProcessing","id","completed","isEditing","setIsEditing","setTodoTitle","handleDoubleClick","handleToggle","handleRemove","defaultChecked","onDoubleClick","TodoList","TransitionGroup","map","CSSTransition","timeout","includes","TodoFooter","filter","itemsLeft","onFilter","onClearCompleted","completedCount","handleClick","textContent","currentTarget","href","selected","All","Active","Completed","TodoNotification","onCloseButton","errorMessage","hasError","handleClose","hidden","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","updateTodo","deleteTodo","USER_ID","App","todos","setTodos","filterBy","setFilterBy","setHasError","setTempTodo","setErrorMessage","setCompletedTodoIdList","message","handleCloseButton","useMemo","activeTodosCount","length","every","toggleAllTodos","a","todosToToggle","all","updatedTodos","currTodos","find","task","handleEnterKeyPress","parseInt","uuidv4","userId","fetchedTodo","catch","finally","updatedTodo","handleFilterBy","str","clearCompletedTodos","completedTodoIds","timeoutId","clearTimeout","todoList","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.772aee3c.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum TodoStatus {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  isTempTodoTrue: boolean,\n  areAllTodosCompleted: boolean,\n  isToggleAllButtonVisible: boolean,\n  showErrorMessage: (message: string) => void,\n  onEnterKeyPress: (todoTitle: string) => void,\n  onToggleAllButtonClick: () => void,\n};\n\nexport const TodoHeader: React.FC<Props> = React.memo(({\n  isTempTodoTrue,\n  areAllTodosCompleted,\n  isToggleAllButtonVisible,\n  showErrorMessage,\n  onEnterKeyPress,\n  onToggleAllButtonClick,\n}) => {\n  const [title, setTitle] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    return () => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n  }, [isTempTodoTrue]);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputElement = event.target as HTMLInputElement;\n\n    setTitle(inputElement.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const normalizedTitle = title.trim();\n\n    if (!normalizedTitle) {\n      showErrorMessage('Title can\\'t be empty');\n\n      return;\n    }\n\n    onEnterKeyPress(normalizedTitle);\n    setTitle('');\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      {isToggleAllButtonVisible && (\n        <button\n          type=\"button\"\n          className={classNames('todoapp__toggle-all', {\n            active: areAllTodosCompleted,\n          })}\n          onClick={onToggleAllButtonClick}\n          aria-label={areAllTodosCompleted\n            ? 'Uncheck all todos'\n            : 'Check all todos'}\n        />\n      )}\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={title}\n          ref={inputRef}\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          disabled={isTempTodoTrue}\n          onChange={handleInputChange}\n        />\n      </form>\n    </header>\n  );\n});\n","import { createContext } from 'react';\nimport { Todo } from '../types/Todo';\n\ninterface TodoListContextType {\n  visibleTodos: Todo[];\n  tempTodo: Todo | null,\n  completedTodoIdList: number[],\n  handleTodoRename: (todoId: number, title: string) => void,\n  handleToggleButtonClick: (todoId: number, completed: boolean) => void,\n  handleRemoveButtonClick: (todoId: number) => void,\n}\n\nexport const TodoListContext = createContext<TodoListContextType>({\n  visibleTodos: [],\n  tempTodo: null,\n  completedTodoIdList: [],\n  handleTodoRename: () => {},\n  handleToggleButtonClick: () => {},\n  handleRemoveButtonClick: () => {},\n});\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { TodoListContext } from '../../../context/TodoListContext';\n\ntype Props = {\n  todoId: number,\n  todoTitle: string,\n  exitEditionMode: () => void,\n};\n\nexport const TodoEditForm: React.FC<Props> = React.memo(({\n  todoId,\n  todoTitle,\n  exitEditionMode,\n}) => {\n  const [title, setTitle] = useState(todoTitle);\n  const {\n    handleTodoRename,\n    handleRemoveButtonClick,\n  } = useContext(TodoListContext);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const inputValue = event.target.value;\n\n      setTitle(inputValue);\n    }, [],\n  );\n\n  const sumbitEdition = () => {\n    const normalizedTitle = title.trim();\n\n    switch (normalizedTitle) {\n      case '':\n        handleRemoveButtonClick(todoId);\n        break;\n      case todoTitle:\n        break;\n      default:\n        handleTodoRename(todoId, normalizedTitle);\n        break;\n    }\n\n    exitEditionMode();\n  };\n\n  const handleSubmit = useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      sumbitEdition();\n    }, [sumbitEdition],\n  );\n\n  const handleKeyUp = useCallback((event: React.KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      exitEditionMode();\n    }\n  }, [exitEditionMode]);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={title}\n        className=\"todo__title-field\"\n        placeholder=\"Empty todo will be deleted\"\n        ref={inputRef}\n        onKeyUp={handleKeyUp}\n        onBlur={sumbitEdition}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n});\n","import React, { useCallback, useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoEditForm } from './TodoEditForm/TodoEditForm';\nimport { TodoListContext } from '../../context/TodoListContext';\n\ntype Props = {\n  todo: Todo,\n  isProcessing: boolean,\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  todo,\n  isProcessing = false,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [todoTitle, setTodoTitle] = useState(title);\n\n  const {\n    handleToggleButtonClick,\n    handleRemoveButtonClick,\n  } = useContext(TodoListContext);\n\n  const handleDoubleClick = useCallback(() => {\n    setTodoTitle(title);\n    setIsEditing(true);\n  }, [todo]);\n\n  const exitEditionMode = useCallback(() => {\n    setIsEditing(false);\n  }, []);\n\n  const handleToggle = useCallback(() => {\n    handleToggleButtonClick(id, completed);\n  }, [id, completed]);\n\n  const handleRemove = useCallback(() => {\n    handleRemoveButtonClick(id);\n  }, [handleRemoveButtonClick, id]);\n\n  return (\n    <div className={classNames('todo', { completed })}>\n      {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          defaultChecked={completed}\n          onClick={handleToggle}\n        />\n      </label>\n\n      {isEditing ? (\n        <TodoEditForm\n          todoId={id}\n          todoTitle={todoTitle}\n          exitEditionMode={exitEditionMode}\n        />\n      ) : (\n        <>\n          <span\n            className=\"todo__title\"\n            onDoubleClick={handleDoubleClick}\n          >\n            {title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            onClick={handleRemove}\n          >\n            ×\n          </button>\n        </>\n      )}\n\n      <div className={classNames('modal', 'overlay', {\n        'is-active': isProcessing,\n      })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n});\n","import React, { useContext } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { TodoListContext } from '../../context/TodoListContext';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList: React.FC = React.memo(() => {\n  const {\n    visibleTodos,\n    tempTodo,\n    completedTodoIdList,\n  } = useContext(TodoListContext);\n\n  return (\n    <section className=\"todoapp__main\">\n      <TransitionGroup>\n        {visibleTodos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              isProcessing={completedTodoIdList.includes(todo.id)}\n            />\n          </CSSTransition>\n        ))}\n\n        {tempTodo && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <TodoItem todo={tempTodo} isProcessing />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n});\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  onFilter: (str: TodoStatus) => void,\n  filter: TodoStatus,\n  itemsLeft: number,\n  completedCount: number,\n  onClearCompleted: () => void,\n};\n\nexport const TodoFooter: React.FC<Props> = React.memo(({\n  filter,\n  itemsLeft,\n  onFilter,\n  onClearCompleted,\n  completedCount,\n}) => {\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLAnchorElement>) => {\n      const { textContent } = event.currentTarget;\n\n      onFilter(textContent as TodoStatus);\n    }, [onFilter],\n  );\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeft} items left`}\n      </span>\n\n      <nav className=\"filter\">\n        <a\n          href=\"#/\"\n          className={classNames('filter__link', {\n            selected: TodoStatus.All === filter,\n          })}\n          onClick={handleClick}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={classNames('filter__link', {\n            selected: TodoStatus.Active === filter,\n          })}\n          onClick={handleClick}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={classNames('filter__link', {\n            selected: TodoStatus.Completed === filter,\n          })}\n          onClick={handleClick}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        disabled={!completedCount}\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n});\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  onCloseButton: () => void,\n  errorMessage: string,\n  hasError: boolean,\n};\n\nexport const TodoNotification: React.FC<Props> = React.memo(({\n  onCloseButton,\n  errorMessage,\n  hasError,\n}) => {\n  const handleClose = useCallback(() => {\n    onCloseButton();\n  }, [onCloseButton]);\n\n  return (\n    <div className={classNames(\n      'notification',\n      'is-danger',\n      'is-light',\n      'has-text-weight-normal',\n      { hidden: !hasError },\n    )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleClose}\n        aria-label=\"Close notification\"\n      />\n\n      <span>{errorMessage}</span>\n    </div>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { NewTodo, Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (todo: NewTodo) => {\n  return client.post<Todo>('/todos', todo);\n};\n\nexport const updateTodo = (todoId: number, todo: NewTodo) => {\n  return client.patch<Todo>(`/todos/${todoId}`, todo);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserWarning } from './UserWarning';\nimport { TodoHeader } from './components/TodoHeader/TodoHeader';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFooter } from './components/TodoFooter/TodoFooter';\nimport { TodoNotification } from './components/TodoNotification';\nimport {\n  getTodos,\n  createTodo,\n  updateTodo,\n  deleteTodo,\n} from './api/todos';\nimport { TodoStatus } from './types/TodoStatus';\nimport { Todo } from './types/Todo';\nimport { TodoListContext } from './context/TodoListContext';\n\nconst USER_ID = 10509;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterBy, setFilterBy] = useState(TodoStatus.All);\n  const [hasError, setHasError] = useState(false);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [completedTodoIdList, setCompletedTodoIdList] = useState<number[]>([]);\n\n  const showErrorMessage = (message: string) => {\n    setHasError(true);\n    setErrorMessage(message);\n  };\n\n  const handleCloseButton = useCallback(() => {\n    setHasError(!hasError);\n  }, [hasError]);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      if (filterBy === TodoStatus.Active) {\n        return !todo.completed;\n      }\n\n      if (filterBy === TodoStatus.Completed) {\n        return todo.completed;\n      }\n\n      return true;\n    });\n  }, [todos, filterBy]);\n\n  const activeTodosCount = useMemo(() => (\n    todos.filter(todo => !todo.completed).length\n  ), [todos]);\n\n  const areAllTodosCompleted = useMemo(() => (\n    todos.every(todo => todo.completed)\n  ), [todos]);\n\n  const toggleAllTodos = useCallback(async () => {\n    const todosToToggle = areAllTodosCompleted\n      ? todos.filter(todo => todo.completed)\n      : todos.filter(todo => !todo.completed);\n\n    setCompletedTodoIdList(todosToToggle.map(todo => todo.id));\n\n    try {\n      const updatedTodos = await Promise.all(todosToToggle\n        .map(todo => updateTodo(todo.id, { completed: !todo.completed })));\n\n      setTodos(currTodos => currTodos.map(todo => {\n        const updatedTodo = updatedTodos.find(task => task.id === todo.id);\n\n        return updatedTodo || todo;\n      }));\n    } catch {\n      showErrorMessage('Unable to update the todos');\n    } finally {\n      setCompletedTodoIdList([]);\n    }\n  }, [todos]);\n\n  const handleEnterKeyPress = useCallback((title: string) => {\n    setTempTodo({\n      id: parseInt(uuidv4(), 16),\n      userId: USER_ID,\n      title,\n      completed: false,\n    });\n\n    createTodo({\n      userId: USER_ID,\n      title,\n      completed: false,\n    })\n      .then(fetchedTodo => setTodos(currTodos => [...currTodos, fetchedTodo]))\n      .catch(() => showErrorMessage('Unable to add a todo'))\n      .finally(() => setTempTodo(null));\n  }, []);\n\n  const handleToggleButtonClick = useCallback(async (\n    todoId: number,\n    completed: boolean,\n  ) => {\n    setCompletedTodoIdList([todoId]);\n\n    try {\n      const updatedTodo = await updateTodo(todoId, { completed: !completed });\n\n      setTodos(currTodos => currTodos.map(todo => {\n        return todo.id === todoId\n          ? updatedTodo\n          : todo;\n      }));\n    } catch {\n      showErrorMessage('Unable to update a todo');\n    } finally {\n      setCompletedTodoIdList([]);\n    }\n  }, [todos]);\n\n  const handleTodoRename = useCallback(async (\n    todoId: number,\n    title: string,\n  ) => {\n    setCompletedTodoIdList([todoId]);\n\n    try {\n      const updatedTodo = await updateTodo(todoId, { title });\n\n      setTodos(currTodos => currTodos.map(todo => {\n        return todo.id === todoId\n          ? updatedTodo\n          : todo;\n      }));\n    } catch {\n      showErrorMessage('Unable to update a todo');\n    } finally {\n      setCompletedTodoIdList([]);\n    }\n  }, [todos]);\n\n  const handleRemoveButtonClick = useCallback(async (todoId: number) => {\n    setCompletedTodoIdList([todoId]);\n\n    try {\n      await deleteTodo(todoId);\n\n      setTodos(todos.filter(todo => todo.id !== todoId));\n    } catch {\n      showErrorMessage('Unable to delete a todo');\n    } finally {\n      setCompletedTodoIdList([]);\n    }\n  }, [todos]);\n\n  const handleFilterBy = useCallback((str: TodoStatus) => {\n    setFilterBy(str);\n  }, []);\n\n  const clearCompletedTodos = useCallback(async () => {\n    const completedTodoIds = todos.filter(todo => todo.completed)\n      .map(todo => todo.id);\n\n    setCompletedTodoIdList(completedTodoIds);\n    try {\n      await Promise.all(completedTodoIds.map(todoId => deleteTodo(todoId)));\n\n      setTodos(todos.filter(todo => !completedTodoIds.includes(todo.id)));\n    } catch {\n      showErrorMessage('Unable to delete the todos');\n    } finally {\n      setCompletedTodoIdList([]);\n    }\n  }, [todos]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setHasError(false);\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [showErrorMessage]);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(todoList => setTodos(todoList))\n      .catch(() => showErrorMessage('Unable to load todos'));\n  }, [USER_ID]);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <TodoHeader\n          isToggleAllButtonVisible={!!todos.length}\n          isTempTodoTrue={!!tempTodo}\n          showErrorMessage={showErrorMessage}\n          onEnterKeyPress={handleEnterKeyPress}\n          onToggleAllButtonClick={toggleAllTodos}\n          areAllTodosCompleted={areAllTodosCompleted}\n        />\n\n        <TodoListContext.Provider value={{\n          visibleTodos,\n          tempTodo,\n          completedTodoIdList,\n          handleTodoRename,\n          handleToggleButtonClick,\n          handleRemoveButtonClick,\n        }}\n        >\n          <TodoList />\n        </TodoListContext.Provider>\n\n        {todos.length > 0 && (\n          <TodoFooter\n            filter={filterBy}\n            itemsLeft={activeTodosCount}\n            onFilter={handleFilterBy}\n            onClearCompleted={clearCompletedTodos}\n            completedCount={todos.length - activeTodosCount}\n          />\n        )}\n      </div>\n\n      <TodoNotification\n        hasError={hasError}\n        errorMessage={errorMessage}\n        onCloseButton={handleCloseButton}\n      />\n    </div>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}